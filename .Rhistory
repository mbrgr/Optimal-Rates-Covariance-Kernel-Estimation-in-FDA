help = function(h){
w_h = local_polynomial_weights(p = p, h = h, p.eval = p, parallel = w.parallel, m = m, parallel.environment = F,...)
max_diff = numeric(n)
future_replicate(N, {
Y = FDA_observation(n, x.design = (1:p - 0.5)/p, f = biLocPol::mu,
r.process = OU, process.arg = list(alpha = theta, sigma = sigma, x0 = 0), eps.arg = list(sd = sd))
Y = apply(Y, 2, function(x){x - mean(x)})
for(l in 1:n){
Z_l         = tcrossprod(Y[l,], Y[l,])
Z_minus_l   = observation_transformation(Y[-l,])
estimate    = eval_weights(w_h, Z_minus_l)
max_diff[l] = max( abs(Z_l - estimate)[!as.logical(diag(p))])
}
rm(Z_l);rm(Z_minus_l)
mean(max_diff)
}, future.seed = T)
}
mean_sup = sapply(h.seq, help)
h.seq[apply(mean_sup, 1, which.min)]
}
k_fold_cv_simulation = function(N, n, p, h.seq, K = 5, m = 1, w.parallel = T, theta = 2, sigma = 3, sd = 0.75){
grp = sample(rep(1:K, ceiling(n/K)), n)
help = function(h){
w_h = local_polynomial_weights(p, h, p.eval = p, m = m, parallel = w.parallel, parallel.environment = F)
max_diff = numeric(K)
future_replicate(N, {
Y = FDA_observation(n, x.design = (1:p - 0.5)/p, f = biLocPol::mu,
r.process = OU, process.arg = list(alpha = theta, sigma = sigma, x0 = 0), eps.arg = list(sd = sd))
for(kk in 1:K){
test_grp     = matrix(observation_transformation(Y[grp == kk,], grid.type = "full"), p, p)
train_grp    = observation_transformation(Y[grp != kk,], grid.type = "less")
pred         = eval_weights(w_h, train_grp)
max_diff[kk] = max(abs((test_grp - pred)[!as.logical(diag(p))]))
}
mean(max_diff)
}, future.seed = T)
}
mean_sup = sapply(h.seq, help)
h.seq[apply(mean_sup, 1, which.min)]
}
k_fold_cv_simulation_2rv = function(N, n, p, h.seq, K = 5, m = 1,
w.parallel = T){
grp = sample(rep(1:K, ceiling(n/K)), n)
help = function(h){
w_h = local_polynomial_weights(p, h, p.eval = p, m = m,
parallel = w.parallel,
parallel.environment = F)
max_diff = numeric(K)
future_replicate(N, {
Y = FDA_observation(n, x.design = (1:p - 0.5)/p,
f = biLocPol::mu, rprocess = z_two_rv,
eps.arg = list(sd = 0.75))
for(kk in 1:K){
test_grp     = matrix(observation_transformation(Y[grp == kk,], grid.type = "full"), p, p)
train_grp    = observation_transformation(Y[grp != kk,], grid.type = "less")
pred         = eval_weights(w_h, train_grp)
max_diff[kk] = max(abs((test_grp - pred)[!as.logical(diag(p))]))
}
mean(max_diff)
}, future.seed = T)
}
mean_sup = sapply(h.seq, help)
h.seq[apply(mean_sup, 1, which.min)]
}
##### Process with smooth diagonal in cov kernel ######
# Z(x) = sqrt(2)/6 * (N^2 - 1) * sin(pi * x)  + 2/3 * (M - 1) * (x - 0.5)
z_two_rv = function(n = 1, p = 100, t = NULL){
if( is.null(t) ) {
t = (1:p - 1/2)/p
}
N = matrix(rnorm(2*n, 0, 1), n, 2)
apply(N, 1, function(m){
2/3 * m[1] * sin(pi * t) +
sqrt(2)*2/3 * m[2] * cos(1.25*pi*t)
}) |> t()
}
cov_z_2rv = function(t){
4/9*sin(pi*t[1])*sin(pi*t[2]) +
8/9*cos(1.25*pi*t[1])*cos(1.25*pi*t[2])
}
partial01_cov_z_2rv = function(t){
4/9*pi*sin(pi*t[1])*cos(pi*t[2]) -
10/9*pi*cos(1.25*pi*t[1])*sin(1.25*pi*t[2])
}
partial11_cov_z_2rv = function(t){
4/9*pi^2*cos(pi*t[1])*cos(pi*t[2]) +
25/18*pi^2*sin(1.25*pi*t[1])*sin(1.25*pi*t[2])
}
##### Bandwidth Comparison for Covariance derivative estimation #####
n = 400
N = 1000
n.seq = c(50, 100, 200, 400)
p.seq = c(15, 25, 50, 75, 100)
p.eval = 100
H = lapply(1:length(p.seq), function(l){seq(1, 3/p.seq[l], -0.05)})
# Parameter OU Process
theta = 2; sigma = 3
# Standard deviation for additional errors
sd = 0.75
bw_comparison = list()
biLocPol::cov_ou()
n = 400
N = 1000
n.seq = c(50, 100, 200, 400)
p.seq = c(15, 25, 50, 75, 100)
p.eval = 100
H = lapply(1:length(p.seq), function(l){seq(1, 3/p.seq[l], -0.05)})
# Parameter OU Process
theta = 2; sigma = 3
# Standard deviation for additional errors
sd = 0.75
bw_comparison = list()
cl = parallel::makeCluster(parallel::detectCores( ) - 1)
future::plan(future::multisession)
del10_cov_OU = function(t, sigma, theta){
if(t[1] > t[2]){
return(sigma^2/2 * (exp(-theta*(t[1] - t[2])) + exp(-theta*(t+s)) ))
}
if(t[1] == t[2]){return(sigma^2 * exp(-theta*2*t[1]))}
if(t[1] < t[2]){
return(sigma^2/2 * (-exp(theta*(t[1] - t[2])) + exp(-theta*(t+s)) ))
}
}
del01_cov_OU = function(t, sigma, theta){
return(del10_cov_OU(c(t[2], t[1]), sigma, theta))
}
library(plotly)
del10_cov_OU = function(t, sigma, theta){
if(t[1] > t[2]){
return(sigma^2/2 * (exp(-theta*(t[1] - t[2])) + exp(-theta*(t+s)) ))
}
if(t[1] == t[2]){return(sigma^2 * exp(-theta*2*t[1]))}
if(t[1] < t[2]){
return(sigma^2/2 * (-exp(theta*(t[1] - t[2])) + exp(-theta*(t+s)) ))
}
}
del01_cov_OU = function(t, sigma, theta){
return(del10_cov_OU(c(t[2], t[1]), sigma, theta))
}
cov10.ou.eval = matrix(apply(observation_grid(p.eval, comp = "full"), 1, function(x){
del10_cov_OU(x, sigma, theta)
}), p.eval, p.eval)
del10_cov_OU = function(t, sigma, theta){
if(t[1] > t[2]){
return(sigma^2/2 * (exp(-theta*(t[1] - t[2])) + exp(-theta*(t[1]+t[2])) ))
}
if(t[1] == t[2]){return(sigma^2 * exp(-theta*2*t[1]))}
if(t[1] < t[2]){
return(sigma^2/2 * (-exp(theta*(t[1] - t[2])) + exp(-theta*(t[1]+t[2])) ))
}
}
cov10.ou.eval = matrix(apply(observation_grid(p.eval, comp = "full"), 1, function(x){
del10_cov_OU(x, sigma, theta)
}), p.eval, p.eval)
x
x = observation_grid(p.eval, comp = "full")[1:p.eval, 1]
cov10.ou.eval = matrix(apply(observation_grid(p.eval, comp = "full"), 1, function(x){
del10_cov_OU(x, sigma, theta)
}), p.eval, p.eval)
x = observation_grid(p.eval, comp = "full")[1:p.eval, 1]
cov10.ou.eval = matrix(apply(observation_grid(p.eval, comp = "full"), 1, function(x){
del10_cov_OU(x, sigma, theta)
}), p.eval, p.eval)
plot_ly() |>
add_surface(x = x, y = x, z = cov10.ou.eval ,
colors = c('#BF382A', '#0C4B8E'), alpha = .3) |>
layout(scene = list(xaxis = list(title = ""),
yaxis = list(title = ""),
zaxis = list(title = "")))
plot_ly() |>
add_surface(x = x, y = x, z = cov10.ou.eval) |>
layout(scene = list(xaxis = list(title = ""),
yaxis = list(title = ""),
zaxis = list(title = "")))
x.design = (1:p - 0.5)/p
p = 20
x.design = (1:p - 0.5)/p
s = length(h)
h = 0.2
x.eval.grid = observation_grid(p.eval, comp = "lesseq")
= length(h)
s = length(h)
x.eval.grid = observation_grid(p.eval, comp = "lesseq")
up.eval = as.vector(upper.tri(matrix(0, p.eval, p.eval), diag = T))
temp = as.vector(matrix( (1:p.eval-1/2)/p.eval, p.eval, p.eval, byrow = F))[up.eval]
G01 = apply(x.eval.grid, 1, del01_cov_OU)
G10 = apply(x.eval.grid, 1, del10_cov_OU)
del10_cov_OU = function(t, sigma = 3, theta = 2){
if(t[1] > t[2]){
return(sigma^2/2 * (exp(-theta*(t[1] - t[2])) + exp(-theta*(t[1]+t[2])) ))
}
if(t[1] == t[2]){return(sigma^2 * exp(-theta*2*t[1]))}
if(t[1] < t[2]){
return(sigma^2/2 * (-exp(theta*(t[1] - t[2])) + exp(-theta*(t[1]+t[2])) ))
}
}
del01_cov_OU = function(t, sigma = 3, theta = 2){
return(del10_cov_OU(c(t[2], t[1]), sigma, theta))
}
cov10.ou.eval = matrix(apply(observation_grid(p.eval, comp = "full"), 1, del10_cov_OU), p.eval, p.eval)
plot_ly() |>
add_surface(x = x, y = x, z = cov10.ou.eval) |>
layout(scene = list(xaxis = list(title = ""),
yaxis = list(title = ""),
zaxis = list(title = "")))
G01 = apply(x.eval.grid, 1, del01_cov_OU)
G10 = apply(x.eval.grid, 1, del10_cov_OU)
sup.err10 = numeric(length(n.seq))
sup.err01 = numeric(length(n.seq))
w = local_polynomial_weights(p, h, p.eval, F, m = 2, grid.type = grid.type, del = 1)
w = local_polynomial_weights(p, h, p.eval, F, m = 2, grid.type = "less", del = 1)
p = 40
x.design = (1:p - 0.5)/p
s = length(h)
x.eval.grid = observation_grid(p.eval, comp = "lesseq")
up.eval = as.vector(upper.tri(matrix(0, p.eval, p.eval), diag = T))
temp = as.vector(matrix( (1:p.eval-1/2)/p.eval, p.eval, p.eval, byrow = F))[up.eval]
G01 = apply(x.eval.grid, 1, del01_cov_OU)
G10 = apply(x.eval.grid, 1, del10_cov_OU)
sup.err10 = numeric(length(n.seq))
sup.err01 = numeric(length(n.seq))
w = local_polynomial_weights(p, h, p.eval, F, m = 2, grid.type = "less", del = 1)
warnings()
w
k = 1
n = n.seq[k]
sup.err[k] =  mean(replicate(N, {
Z = biLocPol::z_2rv(n, p) # R^{n x p}
eps = matrix(rnorm(n * p, 0, 0.75))
if(grid.type == "less"){
Z = observation_transformation(Process + eps)
} else {
Z = observation_transformation(Process + eps, grid.type = "without diagonal")
}
apply(eval_weights(W, Z) - G, 2, function(m){max(abs(m))})
}))
Z = biLocPol::z_2rv(n, p) # R^{n x p}
eps = matrix(rnorm(n * p, 0, 0.75))
Z = observation_transformation(Process + eps)
Z = observation_transformation(Z + eps)
Z = biLocPol::z_2rv(n, p) # R^{n x p}
dim(Z)
eps = matrix(rnorm(n * p, 0, 0.75), n, p)
eps
dim(emps)
dim(eps)
Y = biLocPol::z_2rv(n, p) # R^{n x p}
Y = biLocPol::z_2rv(n, p) + matrix(rnorm(n * p, 0, 0.75), n, p) # n x p
Z = observation_transformation(Y)
apply(eval_weights(W, Z) - G, 2, function(m){max(abs(m))})
apply(eval_weights(w, Z) - G, 2, function(m){max(abs(m))})
estimate = eval_weights(w, Z)
estimate
n = n.seq[k]
sup.err[k] =  mean(replicate(N, {
Y = biLocPol::z_2rv(n, p) + matrix(rnorm(n * p, 0, 0.75), n, p) # n x p
Z = observation_transformation(Y)
estimate = max(abs(eval_weights(w, Z)[,,2] - G10))
}))
Y = biLocPol::z_2rv(n, p) + matrix(rnorm(n * p, 0, 0.75), n, p) # n x p
Z = observation_transformation(Y)
estimate = max(abs(eval_weights(w, Z)[,,2] - G10))
eval_weights(w, Z)[,,2]
G10
x.eval.grid = observation_grid(p.eval, comp = "full")
x.eval.grid = observation_grid(p.eval, comp = "full")
#G01 = apply(x.eval.grid, 1, del01_cov_OU)
G10 = apply(x.eval.grid, 1, del10_cov_OU)
estimate = max(abs(eval_weights(w, Z)[,,2] - G10))
estimate
estimate = eval_weights(w, Z)[,,2]
estimate
plot_ly() |>
add_surface(x = x, y = x, z = cov10.ou.eval) |>
add_surface(x = x, y = x, z = estimate) |>
layout(scene = list(xaxis = list(title = ""),
yaxis = list(title = ""),
zaxis = list(title = "")))
plot_ly() |>
# add_surface(x = x, y = x, z = cov10.ou.eval) |>
add_surface(x = x, y = x, z = estimate) |>
layout(scene = list(xaxis = list(title = ""),
yaxis = list(title = ""),
zaxis = list(title = "")))
plot_ly() |>
# add_surface(x = x, y = x, z = cov10.ou.eval) |>
add_surface(x = x, y = x, z = eval_weights(w, Z)[,,2]) |>
layout(scene = list(xaxis = list(title = ""),
yaxis = list(title = ""),
zaxis = list(title = "")))
plot_ly() |>
# add_surface(x = x, y = x, z = cov10.ou.eval) |>
add_surface(x = x, y = x, z = eval_weights(w, Z)[,,3]) |>
layout(scene = list(xaxis = list(title = ""),
yaxis = list(title = ""),
zaxis = list(title = "")))
Y = biLocPol::OU(n, p) + matrix(rnorm(n * p, 0, 0.75), n, p) # n x p
(1:p - 0.5)/p
biLocPol::OU(n, (1:p - 0.5)/p)
Y = colMeans(biLocPol::OU(n, (1:p - 0.5)/p)) + matrix(rnorm(n * p, 0, 0.75), n, p) # n x p
Z = observation_transformation(Y)
estimate = eval_weights(w, Z)[,,2]
plot_ly() |>
# add_surface(x = x, y = x, z = cov10.ou.eval) |>
add_surface(x = x, y = x, z = eval_weights(w, Z)[,,3]) |>
layout(scene = list(xaxis = list(title = ""),
yaxis = list(title = ""),
zaxis = list(title = "")))
Y = biLocPol::OU(n, (1:p - 0.5)/p) + matrix(rnorm(n * p, 0, 0.75), n, p) # n x p
Z = observation_transformation(Y)
estimate = eval_weights(w, Z)[,,2]
plot_ly() |>
# add_surface(x = x, y = x, z = cov10.ou.eval) |>
add_surface(x = x, y = x, z = eval_weights(w, Z)[,,3]) |>
layout(scene = list(xaxis = list(title = ""),
yaxis = list(title = ""),
zaxis = list(title = "")))
plot_ly() |>
add_surface(x = x, y = x, z = cov10.ou.eval) |>
add_surface(x = x, y = x, z = eval_weights(w, Z)[,,2]) |>
layout(scene = list(xaxis = list(title = ""),
yaxis = list(title = ""),
zaxis = list(title = "")))
plot_ly() |>
add_surface(x = x, y = x, z = cov10.ou.eval) |>
add_surface(x = x, y = x, z = eval_weights(w, Z)[,,3]) |>
layout(scene = list(xaxis = list(title = ""),
yaxis = list(title = ""),
zaxis = list(title = "")))
n
n = 400
Y = biLocPol::OU(n, (1:p - 0.5)/p) + matrix(rnorm(n * p, 0, 0.75), n, p) # n x p
Z = observation_transformation(Y)
estimate = eval_weights(w, Z)[,,2]
plot_ly() |>
add_surface(x = x, y = x, z = cov10.ou.eval) |>
add_surface(x = x, y = x, z = eval_weights(w, Z)[,,3]) |>
layout(scene = list(xaxis = list(title = ""),
yaxis = list(title = ""),
zaxis = list(title = "")))
Y = biLocPol::OU(n, (1:p - 0.5)/p, sigma = sigma, alpha = theta) + matrix(rnorm(n * p, 0, 0.75), n, p) # n x p
Z = observation_transformation(Y)
plot_ly() |>
add_surface(x = x, y = x, z = cov10.ou.eval) |>
add_surface(x = x, y = x, z = eval_weights(w, Z)[,,3]) |>
layout(scene = list(xaxis = list(title = ""),
yaxis = list(title = ""),
zaxis = list(title = "")))
h = 0.4
#sup.err01 = numeric(length(n.seq))
w = local_polynomial_weights(p, h, p.eval, F, m = 2, grid.type = "less", del = 1)
n = n.seq[k]
n
n = 400
sup.err[k] =  mean(replicate(N, {
Y = biLocPol::OU(n, (1:p - 0.5)/p, sigma = sigma, alpha = theta) + matrix(rnorm(n * p, 0, 0.75), n, p) # n x p
Z = observation_transformation(Y)
estimate = eval_weights(w, Z)[,,2]
}))
Y = biLocPol::OU(n, (1:p - 0.5)/p, sigma = sigma, alpha = theta) + matrix(rnorm(n * p, 0, 0.75), n, p) # n x p
Z = observation_transformation(Y)
estimate = eval_weights(w, Z)[,,2]
plot_ly() |>
add_surface(x = x, y = x, z = cov10.ou.eval) |>
add_surface(x = x, y = x, z = eval_weights(w, Z)[,,3]) |>
layout(scene = list(xaxis = list(title = ""),
yaxis = list(title = ""),
zaxis = list(title = "")))
plot_ly() |>
add_surface(x = x, y = x, z = cov10.ou.eval) |>
add_surface(x = x, y = x, z = eval_weights(w, Z)[,,3],
colors = c('#BF382A', '#0C4B8E'), alpha = .3) |>
layout(scene = list(xaxis = list(title = ""),
yaxis = list(title = ""),
zaxis = list(title = "")))
plot_ly() |>
# add_surface(x = x, y = x, z = cov10.ou.eval) |>
add_surface(x = x, y = x, z = eval_weights(w, Z)[,,3],
colors = c('#BF382A', '#0C4B8E'), alpha = .3) |>
layout(scene = list(xaxis = list(title = ""),
yaxis = list(title = ""),
zaxis = list(title = "")))
plot_ly() |>
add_surface(x = x, y = x, z = cov10.ou.eval) |>
add_surface(x = x, y = x, z = eval_weights(w, Z)[,,3],
colors = c('#BF382A', '#0C4B8E'), alpha = .3) |>
layout(scene = list(xaxis = list(title = ""),
yaxis = list(title = ""),
zaxis = list(title = "")))
plot_ly() |>
add_surface(x = x, y = x, z = eval_weights(w, Z)[,,3],
colors = c('#BF382A', '#0C4B8E'), alpha = .3) |>
add_surface(x = x, y = x, z = cov10.ou.eval) |>
layout(scene = list(xaxis = list(title = ""),
yaxis = list(title = ""),
zaxis = list(title = "")))
plot_ly() |>
add_surface(x = x, y = x, z = eval_weights(w, Z)[,,3],
colors = c('#BF382A', '#0C4B8E'), alpha = .3) |>
add_surface(x = x, y = x, z = cov10.ou.eval, colors = c("blue", "yellow")) |>
layout(scene = list(xaxis = list(title = ""),
yaxis = list(title = ""),
zaxis = list(title = "")))
plot_ly() |>
add_surface(x = x, y = x, z = eval_weights(w, Z)[,,3],
colors = c('#BF382A', '#0C4B8E'), alpha = .3) |>
add_surface(x = x, y = x, z = cov10.ou.eval, colorscale = c("blue", "yellow")) |>
layout(scene = list(xaxis = list(title = ""),
yaxis = list(title = ""),
zaxis = list(title = "")))
plot_ly() |>
add_surface(x = x, y = x, z = eval_weights(w, Z)[,,3],
colorscale = c('#BF382A', '#0C4B8E'), alpha = .3) |>
add_surface(x = x, y = x, z = cov10.ou.eval, colorscale = c("blue", "yellow")) |>
layout(scene = list(xaxis = list(title = ""),
yaxis = list(title = ""),
zaxis = list(title = "")))
plot_ly() |>
add_surface(x = x, y = x, z = eval_weights(w, Z)[,,3],
colors = c('#BF382A', '#0C4B8E'), alpha = .3) |>
add_surface(x = x, y = x, z = cov10.ou.eval, colorscale = c("blue", "yellow")) |>
layout(scene = list(xaxis = list(title = ""),
yaxis = list(title = ""),
zaxis = list(title = "")))
plot_ly() |>
add_surface(x = x, y = x, z = cov10.ou.eval, colorscale = c("blue", "yellow")) |>
add_surface(x = x, y = x, z = eval_weights(w, Z)[,,3],
colors = c('#BF382A', '#0C4B8E'), alpha = .3) |>
layout(scene = list(xaxis = list(title = ""),
yaxis = list(title = ""),
zaxis = list(title = "")))
plot_ly() |>
add_surface(x = x, y = x, z = cov10.ou.eval, colorscale = c("blue", "yellow"), alpha= .5) |>
add_surface(x = x, y = x, z = eval_weights(w, Z)[,,3],
colors = c('#BF382A', '#0C4B8E'), alpha = .3) |>
layout(scene = list(xaxis = list(title = ""),
yaxis = list(title = ""),
zaxis = list(title = "")))
plot_ly() |>
add_surface(x = x, y = x, z = cov10.ou.eval, colorscale = c("blue", "yellow"), alpha= .5) |>
add_surface(x = x, y = x, z = eval_weights(w, Z)[,,3],
colorscale = c('#BF382A', '#0C4B8E'), alpha = .3) |>
layout(scene = list(xaxis = list(title = ""),
yaxis = list(title = ""),
zaxis = list(title = "")))
plot_ly() |>
add_surface(x = x, y = x, z = cov10.ou.eval, colorscale = c("blue", "yellow"), alpha= .5) |>
add_surface(x = x, y = x, z = eval_weights(w, Z)[,,3],
colors = c('#BF382A', '#0C4B8E'), alpha = .3) |>
layout(scene = list(xaxis = list(title = ""),
yaxis = list(title = ""),
zaxis = list(title = "")))
plot_ly() |>
add_surface(x = x, y = x, z = cov10.ou.eval, colorscale = c("blue", "yellow"), alpha= .5) |>
add_surface(x = x, y = x, z = eval_weights(w, Z)[,,3], alpha = .5,
colors = c('#BF382A', '#0C4B8E')) |>
layout(scene = list(xaxis = list(title = ""),
yaxis = list(title = ""),
zaxis = list(title = "")))
which(x.design > 0.1 & x.design < (1-0.1))
for(k in 1:length(n.seq)){
n = n.seq[k]
sup.err[k] =  mean(replicate(N, {
Y = biLocPol::OU(n, x.design, sigma = sigma, alpha = theta) + matrix(rnorm(n * p, 0, 0.75), n, p) # n x p
Z = observation_transformation(Y)
trim = which(x.design > 0.1 & x.design < (1-0.1))
estimate = eval_weights(w, Z)[,,3]
max(abs(estimate - G10)[trim, trim])
}))
}
n = 50
Y = biLocPol::OU(n, x.design, sigma = sigma, alpha = theta) + matrix(rnorm(n * p, 0, 0.75), n, p) # n x p
Z = observation_transformation(Y)
trim = which(x.design > 0.1 & x.design < (1-0.1))
estimate = eval_weights(w, Z)[,,3]
max(abs(estimate - G10)[trim, trim])
bandwidth_evaluation_derivative_OU = function(h, p, p.eval, n.seq, N){
x.design = (1:p - 0.5)/p
s = length(h)
x.eval.grid = observation_grid(p.eval, comp = "full")
G10 = apply(x.eval.grid, 1, del10_cov_OU)
sup.err10 = numeric(length(n.seq))
w = local_polynomial_weights(p, h, p.eval, F, m = 2, grid.type = "less", del = 1)
for(k in 1:length(n.seq)){
n = n.seq[k]
sup.err[k] =  mean(replicate(N, {
Y = biLocPol::OU(n, x.design, sigma = sigma, alpha = theta) + matrix(rnorm(n * p, 0, 0.75), n, p) # n x p
Z = observation_transformation(Y)
trim = which(x.design > 0.1 & x.design < (1-0.1))
estimate = eval_weights(w, Z)[,,3]
max(abs(estimate - G10)[trim, trim])
}))
}
rm(w)
matrix(c(n.seq, rep(c(p, h), each = length(n.seq)), sup.err), ncol =  4)
}
##### Bandwidth Comparison for Covariance derivative estimation #####
n = 400
N = 1000
n.seq = c(50, 100, 200, 400)
p.seq = c(15, 25, 50, 75, 100)
p.eval = 100
H = lapply(1:length(p.seq), function(l){seq(1, 3/p.seq[l], -0.05)})
H
H = lapply(1:length(p.seq), function(l){seq(.7, 3/p.seq[l], -0.05)})
# Parameter OU Process
theta = 2; sigma = 3
# Standard deviation for additional errors
sd = 0.75
bw_comparison = list()
cl = parallel::makeCluster(parallel::detectCores( ) - 1)
future::plan(future::multisession)
