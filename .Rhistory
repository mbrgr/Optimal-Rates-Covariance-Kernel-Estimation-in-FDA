bw_comparison_tbl |>
filter(n == 400) |>
ggplot() +
geom_point(aes(x = h, y = sup.err, col = p, pch = p)) +
ylim(c(0.02, 0.52)) +
labs(title = "n = 400")
# add: dissertation
bw_comparison_tbl |>
ggplot() +
geom_point(aes(x = h, y = sup.err, col = p, pch = p)) +
ylim(c(0.02, 0.52)) +
facet_wrap(n~.)
# add: dissertation
bw_comparison_tbl |>
ggplot() +
geom_point(aes(x = h, y = sup.err, col = p, pch = p)) +
facet_wrap(n~.)
# add: dissertation
bw_comparison_tbl |>
ggplot() +
geom_point(aes(x = h, y = sup.err, col = p, pch = p)) +
facet_wrap(n~., nrow = 1)
# add: dissertation
bw_comparison_tbl |>
ggplot() +
geom_point(aes(x = h, y = sup.err, col = p, pch = p)) +
ylim = c(0, 1)
# add: dissertation
bw_comparison_tbl |>
ggplot() +
geom_point(aes(x = h, y = sup.err, col = p, pch = p)) +
lims(y = c(0, 1)) +
facet_wrap(n~., nrow = 1)
# add: dissertation
bw_comparison_tbl |>
ggplot() +
geom_point(aes(x = h, y = sup.err, col = p, pch = p)) +
lims(y = c(0, .95)) +
facet_wrap(n~., nrow = 1)
ggsave("Grafics/cov_optimal_bw_various_n.png", device = "png", width = 8, height = 4, units = "in")
##### five fold cv #####
load("data/five_fold_cv_OU.RData")
five_fold_tbl = tibble(h = five_fold_cv %>% unlist(), p = gl(5, 1000, labels = p.seq))
five_fold_tbl %>%
ggplot(aes(y = h, x = p, col = p)) +
geom_boxplot()
five_fold_table = five_fold_tbl %>%
group_by_all() %>%
summarise(n = n()/1000)
# Figure in Appendix
five_fold_table %>%
ggplot(aes(h, n)) +
geom_point(size = 3) +
ylim(c(0, 0.1))+
facet_wrap(.~p) +
ylab(NULL) +
labs(title = "n = 100")
#### Estimator Comparison ####
load("data/estimator_comparison.RData")
to_tibble = function(bw_comp, est = "mir", m = 1, Z = "OU") {
Reduce(rbind, bw_comp) |>
as_tibble() |>
rename(n = V1, p = V2, h = V3, sup.err = V4) |>
mutate(p = as.factor(p),
n = as.factor(n),
estimator = est,
m = m,
Z = Z)
}
est_comp = rbind(OU_m0, OU_m1,
OU_m0_full, OU_m1_full,
OU_m2, OU_m2_full,
rv2_m0, rv2_m1,
rv2_m0_full, rv2_m1_full,
rv2_m2, rv2_m2_full) |>
mutate(estimator = as.factor(estimator),
m = as.factor(m), Z = as.factor(Z))
# Figure 8a
est_comp |>
filter(n == 100, p == 50, Z == "OU") |>
ggplot(aes(x = h, y = sup.err, lty = estimator, col = m)) +
geom_line(size = .6) +
lims(y = c(0.03, 1.2)) +
theme(text = element_text(size = 18)) +
labs(title = "Ornstein-Uhlenbeck", subtitle = "n = 100, p = 50")
# Figure 8b
est_comp |>
filter(n == 100, p == 50, Z == "2rv") |>
ggplot(aes(x = h, y = sup.err, lty = estimator, col = m)) +
geom_line(size = .6) +
lims(y = c(0.03, 1.1))+
theme(text = element_text(size = 18)) +
labs(title = "Process 2", subtitle = "n = 100, p = 50")
# Figure 8a
est_comp |>
filter(n == 100, p == 50, Z == "OU") |>
ggplot(aes(x = h, y = sup.err, lty = estimator, col = m)) +
geom_point() +
lims(y = c(0.03, 1.2)) +
theme(text = element_text(size = 18)) +
labs(title = "Ornstein-Uhlenbeck", subtitle = "n = 100, p = 50")
# Figure 8a
est_comp |>
filter(n == 100, p == 50, Z == "OU") |>
ggplot(aes(x = h, y = sup.err, pch = estimator, col = m)) +
geom_point() +
lims(y = c(0.03, 1.2)) +
theme(text = element_text(size = 18)) +
labs(title = "Ornstein-Uhlenbeck", subtitle = "n = 100, p = 50")
# Figure 8a
est_comp |>
filter(n == 100, p == 50, Z == "OU") |>
ggplot(aes(x = h, y = sup.err, pch = estimator, col = m)) +
geom_point() +
lims(y = c(0.03, 1.2)) +
labs(title = "Ornstein-Uhlenbeck", subtitle = "n = 100, p = 50")
# Figure 8b
est_comp |>
filter(n == 100, p == 50, Z == "2rv") |>
ggplot(aes(x = h, y = sup.err, pch = estimator, col = m)) +
geom_point() +
lims(y = c(0.03, 1.1))+
theme(text = element_text(size = 18)) +
labs(title = "Process 2", subtitle = "n = 100, p = 50")
ggsave("Grafics/est_comp_OU_points.png", device = "png", width = 5, height = 3.8, units = "in")
# Figure 8a
est_comp |>
filter(n == 100, p == 50, Z == "OU") |>
ggplot(aes(x = h, y = sup.err, pch = estimator, col = m)) +
geom_point() +
lims(y = c(0.03, 1.2)) +
labs(title = "Ornstein-Uhlenbeck", subtitle = "n = 100, p = 50")
ggsave("Grafics/est_comp_OU_points.png", device = "png", width = 5, height = 3.8, units = "in")
# Figure 8b
est_comp |>
filter(n == 100, p == 50, Z == "2rv") |>
ggplot(aes(x = h, y = sup.err, pch = estimator, col = m)) +
geom_point() +
lims(y = c(0.03, 1.1))+
labs(title = "Process 2", subtitle = "n = 100, p = 50")
ggsave("Grafics/est_comp_2rv_points.png", device = "png", width = 5, height = 3.8, units = "in")
library(plotly)
library(tidyverse)
library(biLocPol) # please install this package from Github first. See "README.md" file for instructions
##### Load Data #####
# instead of evaluating the functions all again the results can be loaded with
load("data/illustrations.RData")
##### Processes #####
# Figure of paths of the processes of the second process
# not contained in the paper
set.seed(134)
p = 40
n =  5
obs = OU(n, t = c(0,(1:p - 0.5)/p), x0 = 0)
obs_tibble = tibble(Y = as.vector(t(obs)), x = rep(c(0, (1:p - 0.5)/p), n), n = gl(n, p + 1))
obs_tibble |>
ggplot(aes(x, Y, col = n)) +
geom_line(aes(lty = n), size = .6) +
geom_point(size = .9) +
geom_abline(slope = 0, intercept = 0, lty = 4) +
labs(y = NULL, x = NULL) +
theme(legend.position = "none",
text = element_text(size = 16))
##### Figure of (empirical) covariances #####
set.seed(513)
n = 100
p = 40
x.design = (1:p - 1/2)/p
p.eval = 150
h = 0.5
# Target function: Orntein-Uhlenbeck process with following parameters:
sigma = 2; theta = 3
x = observation_grid(p.eval, comp = "full")[1:p.eval, 1]
Y = FDA_observation(n, x.design,
r.process = OU, process.arg = list(alpha = theta, sigma = sigma, x0 = 0),
eps.arg = list(sd = 0.5))
Z = observation_transformation(Y)
library(tidyverse)
library(plotly)
library(lubridate)
library(hms)
library(biLocPol) # please install this package from Github first. See "README.md" file for instructions
library(future.apply)
load("data/weather_data_raw.RData")
N$DATUM = str_split_i(N$MESS_DATUM, pattern = " ", i = 1) |> ymd()
tage = c(1, 4, 8, 12, 15, 18, 22, 25, 29)
N_full = N[-(1:6),]
N = N %>%
filter(TAG %in% tage)
N |>
filter(TAG %in% c(1, 8, 15, 22, 29)) |>
ggplot() +
geom_line(aes(x = UHRZEIT, y = TT_10, group = JAHR*TAG, colour = JAHR), alpha = .4) +
facet_wrap(MONAT ~.)
# Figure 9b: Temp. curves in August
N |>
filter(TAG %in% c(1, 15, 29),
MONAT == 8) |>
ggplot() +
geom_line(aes(x = UHRZEIT, y = TT_10, group = JAHR*TAG, colour = JAHR), alpha = .6) +
labs(y = "Temp. in C°", x = "hours", title = "Temp. in August", colour = "year") +
theme(text = element_text(size = 18))
N_wide = N |>
filter(TAG %in% tage) |>  # No consecutive days
mutate(UHRZEIT = as.character(UHRZEIT)) |>
select(JAHR, MONAT, TAG, UHRZEIT, TT_10) |>
pivot_wider(names_from = UHRZEIT,
values_from = TT_10)
Y_all = N_full |>
mutate(UHRZEIT = as.character(UHRZEIT)) |>
select(JAHR, MONAT, TAG, UHRZEIT, TT_10) |>
pivot_wider(names_from = UHRZEIT, values_from = TT_10) |>
filter(MONAT == 4) |>
select(-(1:3))
empirical_cov_all = Y_all |>
as.data.frame() |>
observation_transformation(na.rm = T, grid.type = "full")
empirical_cov_filtered = N_wide |>
filter(MONAT == 4) |>
select(-(1:3)) |>
as.data.frame() |>
observation_transformation(na.rm = T, grid.type = "full")
df_all = tibble(empirical_cov_all, empirical_cov_filtered, observation_grid(144, comp = "full"))
# grafic not contained in paper
plot_ly(df_all, size = .4) |>
add_markers(x = ~Var1, y = ~Var2, z = ~empirical_cov_all) |>
add_markers(x = ~Var1, y = ~Var2, z = ~empirical_cov_filtered, alpha = 0.4)
#### NA Count #####
N |>  summarise(.by = c(JAHR, MONAT, TAG),
n = n(), mean = mean(TT_10)) |>
filter(n == 144) |>
summarise(.by = MONAT,
n = n()) |>
arrange(MONAT)
cov_estimation = function(month, weights = W, nw =  N_wide){
y = nw |>
filter(MONAT == month) |>
select(-(1:3))
z = y |>
as.data.frame() |> # TODO: fix this in biLocPol
observation_transformation(na.rm = T)
eval_weights(weights, z)
}
N_wide |>
filter(MONAT == 3) |>
select(-(1:3)) |> is.na() |> sum()
##### calculate weights #####
p.eval = 72
W = local_polynomial_weights(144, 0.2, p.eval, T, m = 1)
N |>
filter(TAG %in% tage,
MONAT == 1) |>
ggplot() +
geom_line(aes(x = UHRZEIT, y = TT_10, group = JAHR*TAG, colour = JAHR), alpha = .6) +
labs(y = "Temp. in C°", x = "time", title = "Temp. in January", colour = "year") +
theme(text = element_text(size = 12))
ggsave("grafics/january_temp_curves.png", device = "png", width = 5, height = 4, unit = "in")
N |>
filter(TAG %in% tage,
MONAT == 7) |>
ggplot() +
geom_line(aes(x = UHRZEIT, y = TT_10, group = JAHR*TAG, colour = JAHR), alpha = .6) +
labs(y = "Temp. in C°", x = "time", title = "Temp. in July", colour = "year") +
theme(text = element_text(size = 12))
ggsave("grafics/july_temp_curves.png", device = "png", width = 5, height = 4, unit = "in")
library(plotly)
library(tidyverse)
library(biLocPol) # p
##### Load Data #####
# instead of evaluating the functions all again the results can be loaded with
load("data/illustrations.RData")
##### Processes #####
# Figure of paths of the processes of the second process
# not contained in the paper
set.seed(134)
p = 40
n =  5
obs = OU(n, t = c(0,(1:p - 0.5)/p), x0 = 0)
obs_tibble = tibble(Y = as.vector(t(obs)), x = rep(c(0, (1:p - 0.5)/p), n), n = gl(n, p + 1))
obs_tibble |>
ggplot(aes(x, Y, col = n)) +
geom_line(aes(lty = n), size = .6) +
geom_point(size = .9) +
geom_abline(slope = 0, intercept = 0, lty = 4) +
labs(y = NULL, x = NULL) +
theme(legend.position = "none",
text = element_text(size = 16))
##### Figure of (empirical) covariances #####
set.seed(513)
n = 100
p = 40
x.design = (1:p - 1/2)/p
p.eval = 150
h = 0.5
# Target function: Orntein-Uhlenbeck process with following parameters:
sigma = 2; theta = 3
x = observation_grid(p.eval, comp = "full")[1:p.eval, 1]
Y = FDA_observation(n, x.design,
r.process = OU, process.arg = list(alpha = theta, sigma = sigma, x0 = 0),
eps.arg = list(sd = 0.5))
Z = observation_transformation(Y)
temp = apply(Y, 1, tcrossprod) - as.vector(tcrossprod(colMeans(Y)))
Z.all = rowSums(temp)/(n-1)
df.all = data.frame(observation_grid(p, comp = "full"), Z.all)
# empirical covariances only
# Figure not containes in the paper
plot_ly(df.all, x = ~Var1, y = ~Var2, z = ~Z.all, size = .4) |> add_markers()
# evaluate target covariance kernel
cov.ou.eval = matrix(apply(observation_grid(p.eval, comp = "full"), 1, function(x){
cov_ou(x, sigma, theta)
}), p.eval, p.eval)
# plot empirical covariances with covariance kernel
###### Figure 1 ######
figure1 = plot_ly(df.all, x = ~Var1, y = ~Var2, z = ~Z.all, size = .4) |>
add_markers() |>
add_surface(x = x, y = x, z = cov.ou.eval,
colors = c('#BF382A', '#0C4B8E'), alpha = .3) |>
layout(scene = list(xaxis = list(title = ""),
yaxis = list(title = ""),
zaxis = list(title = "")))
figure1
# plot empirical covariances with covariance kernel
###### Figure 1 ######
figure1 = plot_ly(df.all, x = ~Var1, y = ~Var2, z = ~Z.all, size = .4) |>
add_markers() |>
add_surface(x = x, y = x, z = cov.ou.eval,
colors = c('#BF382A', '#0C4B8E'), alpha = .3) |>
layout(scene = list(xaxis = list(title = ""),
yaxis = list(title = ""),
zaxis = list(title = "")))
figure1
load("data/figure_1_2.rdata")
library(plotly)
library(tidyverse)
library(biLocPol) #
figure1
save_image(figure1 |> front_layout(),
file = "grafics/OU_observation_n100p40theta3sigma2sd05_front.pdf",
width = 600, height = 750)
save_image(figure1 |> back_layout(),
file = "grafics/OU_observation_n100p40theta3sigma2sd05_back.pdf",
width = 600, height = 750)
##### Figure 2 #####
figure2a = plot_ly(df.all, x = ~Var1, y = ~Var2, z = ~Z.all, size = .4) |>
add_surface(x = x, y = x, z = cov.ou.eval, alpha = .3, showscale = F) |>
add_surface(x = x, y = x, z = est, colorscale = cs2, alpha = .3, showscale = F)|>
layout(scene = list(xaxis = list(title = ""),
yaxis = list(title = ""),
zaxis = list(title = "")))
figure2a |> back_layout(x = 2, y = .8, z = .6)
save_image(figure2a |> back_layout(x = 2, y = .8, z = .6),
file = "grafics/ou_estimate_m1_h03_sd075.pdf",
width = 600, height = 750)
figure2b |> back_layout(x = 2, y = .8, z = .6)
save_image(figure2b |> back_layout(x = 2, y = .8, z = .6),
file = "grafics/ou_estimate_m1_h02_full_sd075.pdf",
width = 600, height = 750)
##### Load Data #####
# instead of evaluating the functions all again the results can be loaded with
load("data/figure_7.RData")
source("R files/functions.R")
figure7b
save_image(figure7b |> front_layout(),
file = "grafics/2rv_estimate_m1_h01_full.pdf",
width = 600, height = 750)
figure7a
save_image(figure7a |> front_layout(),
file = "grafics/2rv_estimate_m1_h01.pdf",
width = 600, height = 750)
load("data/figure_1_2.rdata")
figure1
library(plotly)
library(tidyverse)
library(biLocPol)
save_image(figure1 |> front_layout(),
file = "grafics/OU_observation_n100p40theta3sigma2sd05_front.pdf",
width = 600, height = 750)
save_image(figure1 |> back_layout(),
file = "grafics/OU_observation_n100p40theta3sigma2sd05_back.pdf",
width = 600, height = 750)
figure2b |> back_layout(x = 2, y = .8, z = .6)
save_image(figure2b |> back_layout(x = 2, y = .8, z = .6),
file = "grafics/ou_estimate_m1_h02_full_sd075.pdf",
width = 600, height = 750)
figure2b |> back_layout(x = 2, y = .8, z = .7)
figure2b |> back_layout(x = 2.1, y = .9, z = .8)
save_image(figure2b |> back_layout(x = 2.1, y = .9, z = .8),
file = "grafics/ou_estimate_m1_h02_full_sd075.pdf",
width = 600, height = 750)
save_image(figure2b |> back_layout(x = 2.3, y = 1, z = .8),
file = "grafics/ou_estimate_m1_h02_full_sd075.pdf",
width = 600, height = 750)
save_image(figure2b |> back_layout(x = 2.5, y = 1.2, z = 1),
file = "grafics/ou_estimate_m1_h02_full_sd075.pdf",
width = 600, height = 750)
save_image(figure2b |> back_layout(x = 2.5, y = 1.4, z = 1),
file = "grafics/ou_estimate_m1_h02_full_sd075.pdf",
width = 600, height = 750)
save_image(figure2b |> back_layout(x = 2.5, y = 1, z = 1),
file = "grafics/ou_estimate_m1_h02_full_sd075.pdf",
width = 600, height = 750)
save_image(figure2b |> back_layout(x = 3, y = .8, z = 1),
file = "grafics/ou_estimate_m1_h02_full_sd075.pdf",
width = 600, height = 750)
save_image(figure2b |> back_layout(x = 3, y = .8, z = .7),
file = "grafics/ou_estimate_m1_h02_full_sd075.pdf",
width = 600, height = 750)
save_image(figure2a |> back_layout(x = 3, y = .8, z = .7),
file = "grafics/ou_estimate_m1_h03_sd075.pdf",
width = 600, height = 750)
save_image(figure2b |> back_layout(x = 3, y = .8, z = .7),
file = "grafics/ou_estimate_m1_h02_full_sd075.pdf",
width = 600, height = 750)
library(plotly)
library(tidyverse)
library(biLocPol) # please install this package from Github first. See "README.md" file for instructions
##### Load Data #####
# instead of evaluating the functions all again the results can be loaded with
load("data/figure_7.RData")
source("R files/functions.R")
figure7a
save_image(figure7a |> front_layout(),
file = "grafics/2rv_estimate_m1_h01.pdf",
width = 600, height = 750)
source("R files/functions.R")
save_image(figure7a |> front_layout(),
file = "grafics/2rv_estimate_m1_h01.pdf",
width = 600, height = 750)
#### plotly Layout ####
back_layout = function(p, x = 2, y = 1.2, z = .2) {
p |> layout(
scene = list(
camera = list(eye = list(x = x, y = y, z = z)),# controls the angle
xaxis = list(title = list(text = "", font = list(size = 24)), tickfont = list(size = 14)),
yaxis = list(title = list(text = "", font = list(size = 24)), tickfont = list(size = 14)),
zaxis = list(title = list(text = "", font = list(size = 24)), tickfont = list(size = 14))),
showlegend = F
)
}
front_layout = function(p, x = -2, y = -1.2, z = .2) {
p |> layout(
scene = list(
camera = list(eye = list(x = x, y = y, z = z)),# controls the angle
xaxis = list(title = list(text = "", font = list(size = 24)), tickfont = list(size = 14)),
yaxis = list(title = list(text = "", font = list(size = 24)), tickfont = list(size = 14)),
zaxis = list(title = list(text = "", font = list(size = 24)), tickfont = list(size = 14))),
showlegend = F
)
}
figure7a
save_image(figure7a |> front_layout(),
file = "grafics/2rv_estimate_m1_h01.pdf",
width = 600, height = 750)
save_image(figure7a |> back_layout(x = 3, y = .8, z = .7),
file = "grafics/2rv_estimate_m1_h01.pdf",
width = 600, height = 750)
save_image(figure7a |> back_layout(x = 3, y = .8, z =1),
file = "grafics/2rv_estimate_m1_h01.pdf",
width = 600, height = 750)
save_image(figure7a |> back_layout(x = 3, y =1, z =1),
file = "grafics/2rv_estimate_m1_h01.pdf",
width = 600, height = 750)
save_image(figure7a |> front_layout(),
file = "grafics/2rv_estimate_m1_h01.pdf",
width = 600, height = 750)
save_image(figure7b |> back_layout(),
file = "grafics/2rv_estimate_m1_h01_full.pdf",
width = 600, height = 750)
save_image(figure7a |> back_layout(),
file = "grafics/2rv_estimate_m1_h01.pdf",
width = 600, height = 750)
save_image(figure7a |> back_layout(z = 2),
file = "grafics/2rv_estimate_m1_h01.pdf",
width = 600, height = 750)
save_image(figure7a |> back_layout(z = 1.5),
file = "grafics/2rv_estimate_m1_h01.pdf",
width = 600, height = 750)
save_image(figure7a |> back_layout(y = 1, z = 1.5),
file = "grafics/2rv_estimate_m1_h01.pdf",
width = 600, height = 750)
save_image(figure7a |> back_layout(y = 1.3, z = 1.2),
file = "grafics/2rv_estimate_m1_h01.pdf",
width = 600, height = 750)
save_image(figure7a |> back_layout(y =.7, z = 1.2),
file = "grafics/2rv_estimate_m1_h01.pdf",
width = 600, height = 750)
save_image(figure7a |> back_layout(y =.7, z = 1),
file = "grafics/2rv_estimate_m1_h01.pdf",
width = 600, height = 750)
save_image(figure7a |> back_layout(y =.7, z = 1),
file = "grafics/2rv_estimate_m1_h01.pdf",
width = 600, height = 900)
save_image(figure7a |> back_layout(x= 1, y =.7, z = 1),
file = "grafics/2rv_estimate_m1_h01.pdf",
width = 600, height = 900)
save_image(figure7a |> back_layout(x = 1.5, y =.7, z = 1),
file = "grafics/2rv_estimate_m1_h01.pdf",
width = 600, height = 900)
View(z_two_rv)
save_image(figure7a |> back_layout(x = 1.5, y =.7, z = 1),
file = "grafics/2rv_estimate_m1_h01.pdf",
width = 600, height = 750)
save_image(figure7a |> back_layout(x = 1.5, y =.7, z = 2),
file = "grafics/2rv_estimate_m1_h01.pdf",
width = 600, height = 750)
save_image(figure7a |> back_layout(x = 2, y 1.2, z = 2),
save_image(figure7a |> back_layout(x = 2, y = 1.2, z = 1.4),
file = "grafics/2rv_estimate_m1_h01.pdf",
width = 600, height = 750)
save_image(figure7b |> back_layout(x = 2, y = 1.2, z = 1.4),
file = "grafics/2rv_estimate_m1_h01_full.pdf",
width = 600, height = 750)
