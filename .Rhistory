#Y3 = biLocPol::z_2rv(n, p)
#Y3 = Y3 |> biLocPol::observation_transformation()
estimation1 = w |> biLocPol::eval_weights(Y1)
estimation2 = w |> biLocPol::eval_weights(Y2)
#estimation3 = w |> biLocPol::eval_weights(Y3)
# variance
var = diag(estimation3[,,1]) * diag(estimation3[,,5]) + diag(estimation3[,,3]/2 + estimation3[,,2]/2)^2
#plot((1:p-0.5)/p, var, type = "l")
par(mfrow = c(1,1))
plot(diag(estimation1[,,2]))
plot(diag(estimation2[,,3]))
#plot(sqrt(n) * diag(estimation1[,,2] - estimation2[,,3])/sqrt(2*t_var))
count = count + as.numeric(sqrt(n)*abs(diag(estimation1[,,2] - estimation2[,,3])/sqrt(2*var)) > qnorm(0.95))
c2 = c2 + any( sqrt(n) * abs(diag(estimation1[,,2] - estimation2[,,3]) / sqrt(2*var) ) > m_quant, na.rm = T)
print(i)
}
w  = biLocPol::local_polynomial_weights(p, h, p_eval, parallel = F, m = 2, del = 2)
cov_z_2rv = function(x, y){
4/9*sin(pi*x)*sin(pi*y) +
8/9*cos(1.25*pi*x)*cos(1.25*pi*y)
}
partial01_cov_z_2rv = function(x,y){
4/9*pi*sin(pi*x)*cos(pi*y) -
10/9*pi*cos(1.25*pi*x)*sin(1.25*pi*y)
}
partial11_cov_z_2rv = function(x,y){
4/9*pi^2*cos(pi*x)*cos(pi*y) +
25/18*pi^2*sin(1.25*pi*x)*sin(1.25*pi*y)
}
true_var = function(t,s){
cov_z_2rv(t,s) * partial11_cov_z_2rv(t,s) + partial01_cov_z_2rv(t,s)*partial01_cov_z_2rv(s,t)
}
t_var = ((1:p-0.5)/p) |> sapply(function(x){true_var(x,x)})
plot((1:p-0.5)/p, t_var, lty = 2, col = 2, type = "l")
count = numeric(p)
c2 = 0
for(i in 1:50){
#Y1 = biLocPol::z_2rv(n, p)
Y1 = BM(n, (1:p-0.5)/p)
Y1 = Y1 |> biLocPol::observation_transformation()
Y2 = BM(n, (1:p-0.5)/p)
#Y2 = biLocPol::z_2rv(n, p)
Y2 = Y2 |> biLocPol::observation_transformation()
#Y3 = biLocPol::z_2rv(n, p)
#Y3 = Y3 |> biLocPol::observation_transformation()
estimation1 = w |> biLocPol::eval_weights(Y1)
estimation2 = w |> biLocPol::eval_weights(Y2)
#estimation3 = w |> biLocPol::eval_weights(Y3)
# variance
var = diag(estimation3[,,1]) * diag(estimation3[,,5]) + diag(estimation3[,,3]/2 + estimation3[,,2]/2)^2
#plot((1:p-0.5)/p, var, type = "l")
par(mfrow = c(1,1))
plot(diag(estimation1[,,2]))
plot(diag(estimation2[,,3]))
#plot(sqrt(n) * diag(estimation1[,,2] - estimation2[,,3])/sqrt(2*t_var))
count = count + as.numeric(sqrt(n)*abs(diag(estimation1[,,2] - estimation2[,,3])/sqrt(2*var)) > qnorm(0.95))
c2 = c2 + any( sqrt(n) * abs(diag(estimation1[,,2] - estimation2[,,3]) / sqrt(2*var) ) > m_quant, na.rm = T)
print(i)
}
count = numeric(p)
c2 = 0
for(i in 1:50){
#Y1 = biLocPol::z_2rv(n, p)
Y1 = BM(n, (1:p-0.5)/p)
Y1 = Y1 |> biLocPol::observation_transformation()
#Y2 = BM(n, (1:p-0.5)/p)
#Y2 = biLocPol::z_2rv(n, p)
#Y2 = Y2 |> biLocPol::observation_transformation()
#Y3 = biLocPol::z_2rv(n, p)
#Y3 = Y3 |> biLocPol::observation_transformation()
estimation1 = w |> biLocPol::eval_weights(Y1)
#estimation2 = w |> biLocPol::eval_weights(Y2)
#estimation3 = w |> biLocPol::eval_weights(Y3)
# variance
var = diag(estimation1[,,1]) * diag(estimation1[,,5]) + diag(estimation1[,,3]/2 + estimation1[,,2]/2)^2
#var = diag(estimation3[,,1]) * diag(estimation3[,,5]) + diag(estimation3[,,3]/2 + estimation3[,,2]/2)^2
#plot((1:p-0.5)/p, var, type = "l")
#par(mfrow = c(1,1))
# plot(diag(estimation1[,,2]))
#plot(diag(estimation2[,,3]))
#plot(sqrt(n) * diag(estimation1[,,2] - estimation2[,,3])/sqrt(2*t_var))
count = count + as.numeric(sqrt(n)*abs(diag(estimation1[,,2] - estimation1[,,3])/sqrt(var)) > qnorm(0.95))
# c2 = c2 + any( sqrt(n) * abs(diag(estimation1[,,2] - estimation1[,,3]) / sqrt(2*var) ) > m_quant, na.rm = T)
print(i)
}
count = numeric(p)
c2 = 0
for(i in 1:50){
#Y1 = biLocPol::z_2rv(n, p)
Y1 = BM(n, (1:p-0.5)/p)
Y1 = Y1 |> biLocPol::observation_transformation()
#Y2 = BM(n, (1:p-0.5)/p)
#Y2 = biLocPol::z_2rv(n, p)
#Y2 = Y2 |> biLocPol::observation_transformation()
#Y3 = biLocPol::z_2rv(n, p)
#Y3 = Y3 |> biLocPol::observation_transformation()
estimation1 = w |> biLocPol::eval_weights(Y1)
#estimation2 = w |> biLocPol::eval_weights(Y2)
#estimation3 = w |> biLocPol::eval_weights(Y3)
# variance
var = diag(estimation1[,,1]) * diag(estimation1[,,5]) + diag(estimation1[,,3]/2 + estimation1[,,2]/2)^2
#var = diag(estimation3[,,1]) * diag(estimation3[,,5]) + diag(estimation3[,,3]/2 + estimation3[,,2]/2)^2
#plot((1:p-0.5)/p, var, type = "l")
#par(mfrow = c(1,1))
#
plot(diag(estimation1[,,2]))
#plot(diag(estimation2[,,3]))
#plot(sqrt(n) * diag(estimation1[,,2] - estimation2[,,3])/sqrt(2*t_var))
count = count + as.numeric(sqrt(n)*abs(diag(estimation1[,,2] - estimation1[,,3])/sqrt(var)) > qnorm(0.95))
# c2 = c2 + any( sqrt(n) * abs(diag(estimation1[,,2] - estimation1[,,3]) / sqrt(2*var) ) > m_quant, na.rm = T)
print(i)
}
warnings()
count/50
count = numeric(p)
c2 = 0
for(i in 1:50){
#Y1 = biLocPol::z_2rv(n, p)
Y1 = BM(n, (1:p-0.5)/p)
Y1 = Y1 |> biLocPol::observation_transformation()
#Y2 = BM(n, (1:p-0.5)/p)
#Y2 = biLocPol::z_2rv(n, p)
#Y2 = Y2 |> biLocPol::observation_transformation()
#Y3 = biLocPol::z_2rv(n, p)
#Y3 = Y3 |> biLocPol::observation_transformation()
estimation1 = w |> biLocPol::eval_weights(Y1)
#estimation2 = w |> biLocPol::eval_weights(Y2)
#estimation3 = w |> biLocPol::eval_weights(Y3)
# variance
var = diag(estimation1[,,1]) * diag(estimation1[,,5]) + diag(estimation1[,,3]/2 + estimation1[,,2]/2)^2
#var = diag(estimation3[,,1]) * diag(estimation3[,,5]) + diag(estimation3[,,3]/2 + estimation3[,,2]/2)^2
#plot((1:p-0.5)/p, var, type = "l")
#par(mfrow = c(1,1))
#
plot(var)
#plot(diag(estimation2[,,3]))
#plot(sqrt(n) * diag(estimation1[,,2] - estimation2[,,3])/sqrt(2*t_var))
count = count + as.numeric(sqrt(n)*abs(diag(estimation1[,,2] - estimation1[,,3])/sqrt(var)) > qnorm(0.95))
# c2 = c2 + any( sqrt(n) * abs(diag(estimation1[,,2] - estimation1[,,3]) / sqrt(2*var) ) > m_quant, na.rm = T)
print(i)
}
#Y1 = biLocPol::z_2rv(n, p)
Y1 = BM(n, (1:p-0.5)/p)
Y1 = Y1 |> biLocPol::observation_transformation()
estimation1 = w |> biLocPol::eval_weights(Y1)
estimation1
# variance
var = diag(estimation1[,,1]) * diag(estimation1[,,5]) + diag(estimation1[,,3]/2 + estimation1[,,2]/2)^2
var
diag(estimation1[,,1]) * diag(estimation1[,,5])
diag(estimation1[,,3]/2 + estimation1[,,2]/2)^2
t_var = ((1:p-0.5)/p) |> sapply(function(x){true_var(x,x)})
plot((1:p-0.5)/p, t_var, lty = 2, col = 2, type = "l")
h = 0.2
x = (1:p-0.5)/p
w  = biLocPol::local_polynomial_weights(p, h, p_eval, parallel = F, m = 2, del = 2)
gc()
N = 100
n = 500
p = 100
p_eval = 50
h = 0.2
x = (1:p-0.5)/p
w  = biLocPol::local_polynomial_weights(p, h, p_eval, parallel = F, m = 2, del = 2)
cov_z_2rv = function(x, y){
4/9*sin(pi*x)*sin(pi*y) +
8/9*cos(1.25*pi*x)*cos(1.25*pi*y)
}
partial01_cov_z_2rv = function(x,y){
4/9*pi*sin(pi*x)*cos(pi*y) -
10/9*pi*cos(1.25*pi*x)*sin(1.25*pi*y)
}
partial11_cov_z_2rv = function(x,y){
4/9*pi^2*cos(pi*x)*cos(pi*y) +
25/18*pi^2*sin(1.25*pi*x)*sin(1.25*pi*y)
}
true_var = function(t,s){
cov_z_2rv(t,s) * partial11_cov_z_2rv(t,s) + partial01_cov_z_2rv(t,s)*partial01_cov_z_2rv(s,t)
}
t_var = ((1:p-0.5)/p) |> sapply(function(x){true_var(x,x)})
plot((1:p-0.5)/p, t_var, lty = 2, col = 2, type = "l")
count = numeric(p_eval)
c2 = 0
#Y1 = biLocPol::z_2rv(n, p)
Y1 = BM(n, (1:p-0.5)/p)
Y1 = Y1 |> biLocPol::observation_transformation()
estimation1 = w |> biLocPol::eval_weights(Y1)
# variance
var = diag(estimation1[,,1]) * diag(estimation1[,,5]) + diag(estimation1[,,3]/2 + estimation1[,,2]/2)^2
#par(mfrow = c(1,1))
#
plot(var)
#plot(diag(estimation2[,,3]))
#plot(sqrt(n) * diag(estimation1[,,2] - estimation2[,,3])/sqrt(2*t_var))
count = count + as.numeric(sqrt(n)*abs(diag(estimation1[,,2] - estimation1[,,3])/sqrt(var)) > qnorm(0.95))
count
#par(mfrow = c(1,1))
#
#plot(var)
#plot(diag(estimation2[,,3]))
plot(diag(estimation1[,,2] - estimation1[,,3]))
count = numeric(p_eval)
c2 = 0
for(i in 1:50){
#Y1 = biLocPol::z_2rv(n, p)
Y1 = BM(n, (1:p-0.5)/p)
Y1 = Y1 |> biLocPol::observation_transformation()
#Y2 = BM(n, (1:p-0.5)/p)
#Y2 = biLocPol::z_2rv(n, p)
#Y2 = Y2 |> biLocPol::observation_transformation()
#Y3 = biLocPol::z_2rv(n, p)
#Y3 = Y3 |> biLocPol::observation_transformation()
estimation1 = w |> biLocPol::eval_weights(Y1)
#estimation2 = w |> biLocPol::eval_weights(Y2)
#estimation3 = w |> biLocPol::eval_weights(Y3)
# variance
var = diag(estimation1[,,1]) * diag(estimation1[,,5]) + diag(estimation1[,,3]/2 + estimation1[,,2]/2)^2
#var = diag(estimation3[,,1]) * diag(estimation3[,,5]) + diag(estimation3[,,3]/2 + estimation3[,,2]/2)^2
#plot((1:p-0.5)/p, var, type = "l")
#par(mfrow = c(1,1))
#
#plot(var)
#plot(diag(estimation2[,,3]))
plot(diag(estimation1[,,2] - estimation1[,,3]))
count = count + as.numeric(sqrt(n)*abs(diag(estimation1[,,2] - estimation1[,,3])/sqrt(var)) > qnorm(0.95))
# c2 = c2 + any( sqrt(n) * abs(diag(estimation1[,,2] - estimation1[,,3]) / sqrt(2*var) ) > m_quant, na.rm = T)
print(i)
}
count = numeric(p_eval)
c2 = 0
for(i in 1:50){
#Y1 = biLocPol::z_2rv(n, p)
Y1 = BM(n, (1:p-0.5)/p)
Y1 = Y1 |> biLocPol::observation_transformation()
#Y2 = BM(n, (1:p-0.5)/p)
#Y2 = biLocPol::z_2rv(n, p)
#Y2 = Y2 |> biLocPol::observation_transformation()
#Y3 = biLocPol::z_2rv(n, p)
#Y3 = Y3 |> biLocPol::observation_transformation()
estimation1 = w |> biLocPol::eval_weights(Y1)
#estimation2 = w |> biLocPol::eval_weights(Y2)
#estimation3 = w |> biLocPol::eval_weights(Y3)
# variance
var = diag(estimation1[,,1]) * diag(estimation1[,,5]) + diag(estimation1[,,3]/2 + estimation1[,,2]/2)^2
#var = diag(estimation3[,,1]) * diag(estimation3[,,5]) + diag(estimation3[,,3]/2 + estimation3[,,2]/2)^2
#plot((1:p-0.5)/p, var, type = "l")
#par(mfrow = c(1,1))
#
#plot(var)
#plot(diag(estimation2[,,3]))
plot(diag(estimation1[,,2] - estimation1[,,3])/sqrt(var))
count = count + as.numeric(sqrt(n)*abs(diag(estimation1[,,2] - estimation1[,,3])/sqrt(var)) > qnorm(0.95))
# c2 = c2 + any( sqrt(n) * abs(diag(estimation1[,,2] - estimation1[,,3]) / sqrt(2*var) ) > m_quant, na.rm = T)
print(i)
}
sqrt(var)
gc()
library(tidyverse)
library(biLocPol) # please install this package from Github first. See "README.md" file for instructions
##### Load Data #####
# instead of evaluating the functions all again the results can be loaded with
load("data/illustrations.RData")
##### Processes #####
# Figure of paths of the processes of the second process
# not contained in the paper
set.seed(134)
p = 40
n =  5
obs = OU(n, t = c(0,(1:p - 0.5)/p), x0 = 0)
obs_tibble = tibble(Y = as.vector(t(obs)), x = rep(c(0, (1:p - 0.5)/p), n), n = gl(n, p + 1))
obs_tibble |>
ggplot(aes(x, Y, col = n)) +
geom_line(aes(lty = n), size = .6) +
geom_point(size = .9) +
geom_abline(slope = 0, intercept = 0, lty = 4) +
labs(y = NULL, x = NULL) +
theme(legend.position = "none",
text = element_text(size = 16))
# empirical covariances only
# Figure not containes in the paper
plot_ly(df.all, x = ~Var1, y = ~Var2, z = ~Z.all, size = .4) |> add_markers()
library(plotly)
library(tidyverse)
library(biLocPol) # please install this package from Github first. See "README.md" file for instructions
x = observation_grid(p.eval, comp = "full")[1:p.eval, 1]
Y = FDA_observation(n, x.design,
r.process = OU, process.arg = list(alpha = theta, sigma = sigma, x0 = 0),
eps.arg = list(sd = 0.5))
Z = observation_transformation(Y)
temp = apply(Y, 1, tcrossprod) - as.vector(tcrossprod(colMeans(Y)))
Z.all = rowSums(temp)/(n-1)
df.all = data.frame(observation_grid(p, comp = "full"), Z.all)
# empirical covariances only
# Figure not containes in the paper
plot_ly(df.all, x = ~Var1, y = ~Var2, z = ~Z.all, size = .4) |> add_markers()
# evaluate target covariance kernel
cov.ou.eval = matrix(apply(observation_grid(p.eval, comp = "full"), 1, function(x){
cov_ou(x, sigma, theta)
}), p.eval, p.eval)
# plot empirical covariances with covariance kernel
###### Figure 1 ######
figure1 = plot_ly(df.all, x = ~Var1, y = ~Var2, z = ~Z.all, size = .4) |>
add_markers() |>
add_surface(x = x, y = x, z = cov.ou.eval,
colors = c('#BF382A', '#0C4B8E'), alpha = .3) |>
layout(scene = list(xaxis = list(title = ""),
yaxis = list(title = ""),
zaxis = list(title = "")))
figure1
est = eval_weights(W, Z)
# plot with estimation
cs2 = list(c(0, 1), c("lightblue", "darkred"))
figure2a = plot_ly(df.all, x = ~Var1, y = ~Var2, z = ~Z.all, size = .4) |>
add_surface(x = x, y = x, z = cov.ou.eval, alpha = .3) |>
add_surface(x = x, y = x, z = est, colorscale = cs2, alpha = .3)|>
layout(scene = list(xaxis = list(title = ""),
yaxis = list(title = ""),
zaxis = list(title = "")))
figure2a
library(poltly)
n = 500
p = 100
p_eval = 50
h = 0.2
x = (1:p-0.5)/p
n = 500
p = 100
p_eval = 50
h = 0.2
x = (1:p-0.5)/p
library(plotly)
n = 500
p = 100
p_eval = 50
h = 0.2
x = (1:p-0.5)/p
w  = biLocPol::local_polynomial_weights(p, h, p_eval, parallel = F, m = 2, del = 2)
mesh_grid = matrix(c(rep(x, 100),
rep(x, each = 100)), 10000, 2)
mesh_grid
G   = mesh_grid |> apply(1, function(x){cov_z_2rv(x[1],x[2])})
G01 = mesh_grid |> apply(1, function(x){partial01_cov_z_2rv(x[1],x[2])})
G11 = mesh_grid |> apply(1, function(x){partial11_cov_z_2rv(x[1],x[2])})
partial01_cov_z_2rv = function(x,y){
4/9*pi*sin(pi*x)*cos(pi*y) -
10/9*pi*cos(1.25*pi*x)*sin(1.25*pi*y)
}
partial11_cov_z_2rv = function(x,y){
4/9*pi^2*cos(pi*x)*cos(pi*y) +
25/18*pi^2*sin(1.25*pi*x)*sin(1.25*pi*y)
}
mesh_grid = matrix(c(rep(x, 100),
rep(x, each = 100)), 10000, 2)
G   = mesh_grid |> apply(1, function(x){cov_z_2rv(x[1],x[2])})
G01 = mesh_grid |> apply(1, function(x){partial01_cov_z_2rv(x[1],x[2])})
G11 = mesh_grid |> apply(1, function(x){partial11_cov_z_2rv(x[1],x[2])})
plot_ly() |>
add_surface(x = x, y = x, z = G)
G
mesh_grid
cov_z_2rv(0.05, 0.05)
cov_z_2rv = function(x, y){
4/9*sin(pi*x)*sin(pi*y) +
8/9*cos(1.25*pi*x)*cos(1.25*pi*y)
}
cov_z_2rv = function(x, y){
4/9*sin(pi*x)*sin(pi*y) +
8/9*cos(1.25*pi*x)*cos(1.25*pi*y)
}
cov_z_2rv(0.05, 0.05)
G   = mesh_grid |> apply(1, function(x){cov_z_2rv(x[1],x[2])})
G
G01
G   = mesh_grid |> apply(1, function(x){cov_z_2rv(x[1],x[2])}) |> as.matrix(100, 100)
G   = mesh_grid |> apply(1, function(x){cov_z_2rv(x[1],x[2])}) |> as.matrix(100, 100)
G01 = mesh_grid |> apply(1, function(x){partial01_cov_z_2rv(x[1],x[2])}) |> as.matrix(100, 100)
G11 = mesh_grid |> apply(1, function(x){partial11_cov_z_2rv(x[1],x[2])}) |> as.matrix(100, 100)
plot_ly() |>
add_surface(x = x, y = x, z = G)
plot_ly() |>
add_surface(x = x, y = x, z = ~G)
x_eval = (1:p_eval - 0.5)/p_eval
x_eval = (1:p_eval - 0.5)/p_eval
mesh_grid = matrix(c(rep(x_eval, p_eval),
rep(x_eval, each = p_eval)), p_eval^2, 2)
G   = mesh_grid |> apply(1, function(x){cov_z_2rv(x[1],x[2])}) |> as.matrix(p_eval, p_eval)
G01 = mesh_grid |> apply(1, function(x){partial01_cov_z_2rv(x[1],x[2])}) |> as.matrix(p_eval, p_eval)
G11 = mesh_grid |> apply(1, function(x){partial11_cov_z_2rv(x[1],x[2])}) |> as.matrix(p_eval, p_eval)
plot_ly() |>
add_surface(x = x, y = x, z = ~G)
plot_ly() |>
add_surface(x = x_eval, y = x_eval, z = ~G)
plot_ly() |>
add_surface(x = x_eval, y = x_eval, z = ~G)
plot_ly() |>
add_surface(x = x_eval, y = x_eval, z = ~G01)
G
G   = mesh_grid |> apply(1, function(x){cov_z_2rv(x[1],x[2])}) |> as.matrix(p_eval, p_eval)
G
G   = mesh_grid |> apply(1, function(x){cov_z_2rv(x[1],x[2])}) |> as.matrix(nrow = p_eval, ncol = p_eval)
G   = mesh_grid |> apply(1, function(x){cov_z_2rv(x[1],x[2])}) |> as.matrix(nrow = p_eval, ncol = p_eval)
G01 = mesh_grid |> apply(1, function(x){partial01_cov_z_2rv(x[1],x[2])}) |> as.matrix(nrow = p_eval, ncol = p_eval)
G11 = mesh_grid |> apply(1, function(x){partial11_cov_z_2rv(x[1],x[2])}) |> as.matrix(nrow = p_eval, ncol = p_eval)
plot_ly() |>
add_surface(x = x_eval, y = x_eval, z = ~G01)
G
mesh_grid |> apply(1, function(x){cov_z_2rv(x[1],x[2])})
G   = mesh_grid |> apply(1, function(x){cov_z_2rv(x[1],x[2])}) |> matrix(nrow = p_eval, ncol = p_eval)
G01 = mesh_grid |> apply(1, function(x){partial01_cov_z_2rv(x[1],x[2])}) |> matrix(nrow = p_eval, ncol = p_eval)
G11 = mesh_grid |> apply(1, function(x){partial11_cov_z_2rv(x[1],x[2])}) |> matrix(nrow = p_eval, ncol = p_eval)
plot_ly() |>
add_surface(x = x_eval, y = x_eval, z = ~G01)
plot_ly() |>
add_surface(x = x_eval, y = x_eval, z = ~G11)
Y = biLocPol::OU(n, x)
Y |> dim
Y |> dim()
Y = biLocPol::OU(n, x) + rnorm(n*p, 0, 0.5)
Z = observation_transformation(Y)
estimation = eval_weights(w, Z)
plot_ly() |>
add_surface(x = x_eval, y = x_eval, z = ~G11) |>
add_surface(x = x_eval, y = x_eval, z = ~estimation[,,5])
plot_ly() |>
add_surface(x = x_eval, y = x_eval, z = ~G) |>
add_surface(x = x_eval, y = x_eval, z = ~estimation[,,1])
Y = biLocPol::OU(n, x) #+ rnorm(n*p, 0, 0.5)
Z = observation_transformation(Y)
estimation = eval_weights(w, Z)
plot_ly() |>
add_surface(x = x_eval, y = x_eval, z = ~G) |>
add_surface(x = x_eval, y = x_eval, z = ~estimation[,,1])
h = 0.1
x = (1:p-0.5)/p
Y = biLocPol::OU(n, x) #+ rnorm(n*p, 0, 0.5)
Z = observation_transformation(Y)
w  = biLocPol::local_polynomial_weights(p, h, p_eval, parallel = F, m = 2, del = 2)
x_eval = (1:p_eval - 0.5)/p_eval
mesh_grid = matrix(c(rep(x_eval, p_eval),
rep(x_eval, each = p_eval)), p_eval^2, 2)
G   = mesh_grid |> apply(1, function(x){cov_z_2rv(x[1],x[2])}) |> matrix(nrow = p_eval, ncol = p_eval)
G01 = mesh_grid |> apply(1, function(x){partial01_cov_z_2rv(x[1],x[2])}) |> matrix(nrow = p_eval, ncol = p_eval)
G11 = mesh_grid |> apply(1, function(x){partial11_cov_z_2rv(x[1],x[2])}) |> matrix(nrow = p_eval, ncol = p_eval)
plot_ly() |>
add_surface(x = x_eval, y = x_eval, z = ~G) |>
add_surface(x = x_eval, y = x_eval, z = ~estimation[,,1])
estimation = eval_weights(w, Z)
plot_ly() |>
add_surface(x = x_eval, y = x_eval, z = ~G) |>
add_surface(x = x_eval, y = x_eval, z = ~estimation[,,1])
Y = biLocPol::z_2rv(n, p)
Z = observation_transformation(Y)
w  = biLocPol::local_polynomial_weights(p, h, p_eval, parallel = F, m = 2, del = 2)
estimation = eval_weights(w, Z)
plot_ly() |>
add_surface(x = x_eval, y = x_eval, z = ~G) |>
add_surface(x = x_eval, y = x_eval, z = ~estimation[,,1])
plot_ly() |>
add_surface(x = x_eval, y = x_eval, z = ~G01) |>
add_surface(x = x_eval, y = x_eval, z = ~estimation[,,2])
plot_ly() |>
add_surface(x = x_eval, y = x_eval, z = ~G01) |>
add_surface(x = x_eval, y = x_eval, z = ~estimation[,,3])
plot_ly() |>
add_surface(x = x_eval, y = x_eval, z = ~G11) |>
add_surface(x = x_eval, y = x_eval, z = ~estimation[,,5])
Y = biLocPol::z_2rv(n, p) + rnorm(n * p, 0, 0.5)
Z = observation_transformation(Y)
estimation = eval_weights(w, Z)
estimation
plot_ly() |>
add_surface(x = x_eval, y = x_eval, z = ~G11) |>
add_surface(x = x_eval, y = x_eval, z = ~estimation[,,5])
h = 0.3
w  = biLocPol::local_polynomial_weights(p, h, p_eval, parallel = F, m = 2, del = 2)
estimation = eval_weights(w, Z)
estimation
plot_ly() |>
add_surface(x = x_eval, y = x_eval, z = ~G11) |>
add_surface(x = x_eval, y = x_eval, z = ~estimation[,,5])
n = 20
Y = biLocPol::z_2rv(n, p)# + rnorm(n * p, 0, 0.5)
Z = observation_transformation(Y)
estimation = eval_weights(w, Z)
estimation
plot_ly() |>
add_surface(x = x_eval, y = x_eval, z = ~G11) |>
add_surface(x = x_eval, y = x_eval, z = ~estimation[,,5])
diag(G11)
diag(estimation[,,5])
?bm
?bm()
Y = BM(n, x)# biLocPol::z_2rv(n, p)# + rnorm(n * p, 0, 0.5)
Z = observation_transformation(Y)
w  = biLocPol::local_polynomial_weights(p, h, p_eval, parallel = F, m = 2, del = 2)
plot_ly() |>
add_surface(x = x_eval, y = x_eval, z = ~estimation[,,5])
diag(estimation[,,5])
Y = BM(n, x)+ rnorm(n * p, 0, 0.5)# biLocPol::z_2rv(n, p)#
Z = observation_transformation(Y)
estimation = eval_weights(w, Z)
estimation
plot_ly() |>
add_surface(x = x_eval, y = x_eval, z = ~estimation[,,5])
diag(estimation[,,5])
Y = BM(n, x)#+ rnorm(n * p, 0, 0.5)# biLocPol::z_2rv(n, p)#
Z = observation_transformation(Y)
estimation = eval_weights(w, Z)
estimation
plot_ly() |>
add_surface(x = x_eval, y = x_eval, z = ~estimation[,,5])
diag(estimation[,,5])
